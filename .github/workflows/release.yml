name: Release

on:
  push:
    tags:
      - "v*.*.*"   # Triggers when pushing version tags like v1.0.0

permissions:
  contents: write   # Needed to publish GitHub releases
  id-token: write   # If using OIDC for publishing to package registries
  packages: write   # If publishing to GitHub Packages (optional)

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Important to fetch full history for changelog tools

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Generate changelog using git log
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            # Generate changelog from previous tag to current
            CHANGELOG="## What's Changed\n\n$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD --no-merges)"
          else
            # First release - show all commits
            CHANGELOG="## Initial Release\n\n$(git log --pretty=format:"- %s (%h)" --no-merges)"
          fi
          
          # Escape newlines and set output
          CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "changelog_content=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT

      # Install build dependencies
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Build the Python package
      - name: Build package
        run: |
          python -m build
          echo "Package built successfully"

      # Publish to PyPI (TestPyPI first for safety)
      - name: Publish to TestPyPI
        if: startsWith(github.ref_name, 'v') && contains(github.ref_name, '-alpha')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          python -m twine upload --verbose dist/*

      # Publish to PyPI (Production)
      - name: Publish to PyPI
        if: startsWith(github.ref_name, 'v') && !contains(github.ref_name, '-alpha') && !contains(github.ref_name, '-beta') && !contains(github.ref_name, '-rc')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --verbose dist/*

      # Create a GitHub release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            ${{ steps.changelog.outputs.changelog_content }}
            
            ## ðŸ“¦ Installation
            
            ```bash
            pip install v0rtex
            ```
            
            ## ðŸ”— Links
            
            - [PyPI Package](https://pypi.org/project/v0rtex/)
            - [Documentation](https://v0rtex.readthedocs.io)
            - [Source Code](https://github.com/${{ github.repository }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload built package artifacts to release
      - name: Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Clean up build artifacts
      - name: Clean up
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf *.egg-info/
